Metadata-Version: 2.1
Name: mpyc
Version: 0.5
Summary: MPyC -- Secure Multiparty Computation in Python
Home-page: https://github.com/lschoe/mpyc
Author: Berry Schoenmakers
Author-email: berry@win.tue.nl
License: Apache License 2.0
Description: [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/lschoe/mpyc/master)
        
        # MPyC <img align="center" width=40 src="images/MPyC_Logo.png"> Secure Multiparty Computation in Python
        
        MPyC supports secure *m*-party computation tolerating a dishonest minority of up to *t* passively corrupt parties,
        where *m &ge; 1* and *0 &le; t &le; (m-1)/2*. The underlying protocols are based on threshold secret sharing over finite
        fields (using Shamir's threshold scheme as well as pseudorandom secret sharing).
        
        The details of the secure computation protocols are mostly transparent due to the use of sophisticated operator overloading
        combined with asynchronous evaluation of the associated protocols.
        
        See the [MPyC homepage](https://www.win.tue.nl/~berry/mpyc/) for more info and background. Click the "launch binder" badge above to view the entire repository and try out its notebooks in the `demos` directory without any install. 
        
        ## Example installs:
        
        `python setup.py install`
        
        `python setup.py install --user`
        
        See `demos` for usage examples.
        
        ## Notes:
        
        1. Python 3.6+ (Python 3.5 or lower is not sufficient).
        
        2. Installing package `gmpy2` is optional, but will considerably enhance the performance of `mpyc`.
        On Linux, `pip install gmpy2` should do the job, but on Windows, this may fail with compiler errors.
        Fortunately, ready-to-go Python wheels for `gmpy2` can be downloaded from Christoph Gohlke's excellent
        [Unofficial Windows Binaries for Python Extension Packages](https://www.lfd.uci.edu/~gohlke/pythonlibs/) webpage.
        Use, for example, `pip install gmpy2-2.0.8-cp36-cp36m-win_amd64.whl` to finish installation.
        
        3. Use `run-all.sh` or `run-all.bat` in the `demos` directory to have a quick look at some demos. 
        Also note the example Windows batch files in the `docs` and `tests` directories.
        
        4. Directory `demos\.config` contains configuration info used to run MPyC with multiple parties. Also, 
        Windows batch file 'gen.bat' shows how to generate fresh key material for SSL. OpenSSL is required to generate 
        SSL key material of your own, use `pip install pyOpenSSL`.
        
        5. To use the [Jupyter](https://jupyter.org/) notebooks `demos\*.ipynb`, you need to have Jupyter installed,
        e.g., using `pip install jupyter`. The latest version of Jupyter will come with IPython 7.0+, which supports
        top-level `await`. Instead of `mpc.run(mpc.start())` one can now simply write `await mpc.start()` anywhere in
        a notebook cell, even outside a coroutine.
        
        Copyright &copy; 2018-2019 Berry Schoenmakers
        
Keywords: crypto,cryptography,multiparty computation,MPC,secret sharing,Shamir threshold scheme,pseudorandom secret sharing,PRSS
Platform: any
Classifier: Development Status :: 3 - Alpha
Classifier: Environment :: Console
Classifier: Framework :: AsyncIO
Classifier: Framework :: Jupyter
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Education
Classifier: Intended Audience :: Information Technology
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Topic :: Security :: Cryptography
Classifier: Topic :: Software Development :: Libraries :: Application Frameworks
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: System :: Distributed Computing
Requires-Python: >=3.6
Description-Content-Type: text/markdown
